
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rcwcurpxbynaaxydivdx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJjd2N1cnB4YnluYWF4eWRpdmR4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxOTM4MzQsImV4cCI6MjA1ODc2OTgzNH0.oc_Hhs-dWDBrYd0ZrMT45AcjN3QUztZy_z311wSMN8Y";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storageKey: 'sb-rcwcurpxbynaaxydivdx-auth-token',
    },
    global: {
      headers: {
        'Content-Type': 'application/json',
      },
    },
    // Add realtime subscriptions
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
    // Improved db connection
    db: {
      schema: 'public',
    },
  }
);

// Utility function to check if a user is authenticated
export const isUserAuthenticated = async () => {
  const { data, error } = await supabase.auth.getSession();
  return { 
    isAuthenticated: !!data.session, 
    session: data.session, 
    error 
  };
};

// Utility function to get current user profile
export const getCurrentUserProfile = async () => {
  const { data: { session } } = await supabase.auth.getSession();
  if (!session) return { profile: null, error: new Error('No active session') };
  
  const { data, error } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', session.user.id as string)
    .single();
    
  return { profile: data, error };
};

// Check the Supabase connection status with retry mechanism
export const checkSupabaseConnection = async (retries = 2) => {
  let lastError = null;
  
  for (let attempt = 0; attempt <= retries; attempt++) {
    try {
      console.log(`Connection attempt ${attempt + 1}/${retries + 1}`);
      
      // Test connection to clinics table which appears to be working
      const { count, error } = await supabase
        .from('clinics')
        .select('*', { count: 'exact', head: true })
        .limit(1);
      
      if (!error) {
        console.log('Successfully connected to Supabase');
        return { 
          connected: true, 
          error: null 
        };
      }
      
      lastError = error.message;
      console.error('Error checking Supabase connection:', error);
      
      // Wait before retrying (except on the last attempt)
      if (attempt < retries) {
        await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
      }
    } catch (error) {
      console.error('Exception checking Supabase connection:', error);
      lastError = error.message;
      
      // Wait before retrying (except on the last attempt)
      if (attempt < retries) {
        await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
      }
    }
  }
  
  return { 
    connected: false, 
    error: lastError || 'Unable to connect to database' 
  };
};
