
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://rcwcurpxbynaaxydivdx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJjd2N1cnB4YnluYWF4eWRpdmR4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxOTM4MzQsImV4cCI6MjA1ODc2OTgzNH0.oc_Hhs-dWDBrYd0ZrMT45AcjN3QUztZy_z311wSMN8Y";

// Create Supabase client with explicit auth configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      storage: localStorage,
      autoRefreshToken: true,
      detectSessionInUrl: true, // Detect OAuth session in URL
    },
    global: {
      headers: {
        'Content-Type': 'application/json',
      },
    },
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
  }
);

// Utility function to check if a user is authenticated
export const isUserAuthenticated = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    return { 
      isAuthenticated: !!data.session, 
      session: data.session, 
      error 
    };
  } catch (error) {
    console.error("Error checking authentication:", error);
    return { 
      isAuthenticated: false, 
      session: null, 
      error 
    };
  }
};

// Utility function to get current user profile
export const getCurrentUserProfile = async () => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) return { profile: null, error: new Error('No active session') };
    
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', session.user.id)
        .single();
        
      if (error) throw error;
      return { profile: data, error: null };
    } catch (error) {
      console.error("Error fetching profile:", error);
      return { profile: null, error };
    }
  } catch (error) {
    console.error("Error getting session:", error);
    return { profile: null, error };
  }
};

// Improved test connection to Supabase with detailed error reporting
export const testSupabaseConnection = async () => {
  console.log("Testing Supabase connection...");
  
  try {
    // Try a simple query instead of a profiles count query which may be affected by RLS
    const startTime = Date.now();
    
    // First, test basic connectivity with a simple system-level query
    const { error: pingError } = await supabase
      .from('clinics')  // Try using clinics table instead which may have less restrictive RLS
      .select('count', { count: 'exact', head: true })
      .limit(1);
    
    const endTime = Date.now();
    const latency = endTime - startTime;
    
    if (pingError) {
      // Try another table as a fallback
      const { error: fallbackError } = await supabase
        .from('settings')
        .select('count', { count: 'exact', head: true })
        .limit(1);
        
      if (fallbackError) {
        console.error("❌ Supabase connection failed on backup check:", fallbackError);
        return { 
          success: false, 
          latency,
          message: `Error: ${fallbackError.message || fallbackError.code || "Connection error"}`,
          error: fallbackError 
        };
      }
    }
    
    console.log(`✅ Supabase connection successful (latency: ${latency}ms)`);
    return { 
      success: true, 
      latency,
      message: `Connected (latency: ${latency}ms)`,
      error: null 
    };
  } catch (error) {
    console.error("❌ Supabase connection failed:", error);
    return { 
      success: false, 
      latency: 0,
      message: error instanceof Error ? error.message : "Unknown connection error",
      error 
    };
  }
};

// Run connection test on import
console.log("Initializing Supabase client and testing connection...");
testSupabaseConnection().then(result => {
  if (result.success) {
    console.log(`Supabase connection successful (latency: ${result.latency}ms)`);
  } else {
    console.error("Supabase connection failed:", result.error);
    // Don't show toast on initial load as it's jarring
    // toast.error("Failed to connect to Supabase. Some features may not work correctly.");
  }
});
